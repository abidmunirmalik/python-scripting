## indentation & spaces
def main(arg):
    if arg == 'batch':
        print(f"running in {arg} mode")
    else:
        print(f"running in standard mode")
        
- TAB are DISCOURGED in Python unless PyCharm, Sublime Text, VS Code is being used
- 4-spaces indentation is preferred for each code block i.e after each loop, function, if, with etc

## VARIABLES
name = 'Abid'
age  =  60
age += 1 # in-line comment
hobbies = ["football", "baseball", "soccorball"]
home_address = load_from_database(name)

- No need to TYPE the variable type
- variables can be initialized from a function return value

## TRUTHINESS
False # false is false
[]    # empty lists/arrays are false
{}    # empty dictionaries are false
""    # empty strings are false
0     # zero ints are false
0.0   # zero floats are false
None  # None/null/nil pointers are false

## IF/ELIF/ELSE STATEMENT
cmd = input('Command, [L]ist or E[x]it: ')
if cmd == 'L':
    list_items()
elif cmd == 'x':
    exit()
else:
    print('Sorry, that wasn't understood.')
    
## COMPLEX CONDITIONAL IF STATEMENT
if not x and ( z != 2 or not y):
    # if block code here
Note: Complex conditions are created by using and, or, not

### FOR-IN 
items = ['cat', 'hat', 'mat']
for item in items:
    print(f'item is {item}')
    
for (idx, item) in enumerate(items):
    print(f'{item} is at index {idx});
    
### FUNCTIONS
def create_user(name, email):
    # validate arguments
    db_user = ...
    return db_user.id
    
### FILE I/O
items = ['cat', 'hat', 'mat']
with open(filename, 'w') as fout:
    for item in items:
        fout.write(item + '\n')

### IMPORT MODULES
import os 
OR
from os import path
os.path.exists(filename) # style 1
OR
path.exists(filename) # style 2

### PACKAGES (third party)
- Most of the packages are already included in standard library
- If not, like SQLAlchemy, install them from www.pypi.org
### USING PIP
- if you want to install package for the current project, no need to use 'sudo'
$ pip install requests
- if you want to install machine-wide package, need 'sudo'
$ sudo pip install requests


### SLICING 
nums = [2,3,5,7,11,13,17,19,23]
first_prime = nums[0] # 2
last_prime = nums[-1] # 23
lowest_four = nums[0:4] # [2,3,5,7]
lowest_four = nums[:4]  # [2,3,5,7]
middle_three = nums[3:6] # [7,11,13] last not inclusive
last_four = nums[5:]  # [13,17,19,23]
last_four = nums[-4:] # [13,17,19,23]

### TUPLES
m = (22.5, 44.234, 19.02, 'strong')
temp = m[0]
quality = m[3]
t, la, lo, q = m
t = 22.5, q='strong'

### NAMED TUPLES
Measurement = collections.namedtuple(
    'Measurement',
    'temp, lat, long, quality')
    
m = Measurement(22.5, 44.234, 19.02, 'strong')
temp = m[0]
temp = m.temp
quality = m.quality
print(m)
# Measurement(temp=22.5, lat=44.234, long=19.02, quality='strong')

Example
# RGB color values example
color = (55, 155, 255) # regular tuple
print(color[0]) # 55

# let's try with dictionary
color = {'red': 55, 'green': 155, 'blue':255}
print(color['red'])

# converting it to named tuple
Color = collections.namedtuple('Color',['red', 'green', 'blue'])

rainbow = Color(125, 125, 125) 
print(f'Red: {rainbow.red}, Green: {rainbow.green}, Blue: {rainbow.blue}')
print(rainbow)
